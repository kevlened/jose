{"code":"import crypto from 'isomorphic-webcrypto';\r\nimport * as algos from 'jose-algorithms';\r\n/**\r\n * Generate a jwk or key pair\r\n * @param {object} json\r\n * @param {string} alg\r\n * @param {object=} options\r\n */\r\nexport function generateKey(alg, { modulusLength = 2048, publicExponent = new Uint8Array([0x01, 0x00, 0x01]), // 65537\r\nusages = ['sign', 'verify'], extractable = true } = {}) {\r\n    if (!algos[alg])\r\n        throw new Error(`alg must be one of ${Object.keys(algos)}`);\r\n    const algo = Object.assign({}, algos[alg]);\r\n    if (algo.name === 'RSASSA-PKCS1-v1_5') {\r\n        algo.modulusLength = modulusLength;\r\n        algo.publicExponent = publicExponent;\r\n    }\r\n    if (algo.name === 'ECDSA') {\r\n        delete algo.hash;\r\n    }\r\n    return crypto.subtle.generateKey(algo, extractable, usages)\r\n        .then(keys => {\r\n        if (!keys.publicKey) {\r\n            return { sharedKey: keys };\r\n        }\r\n        return keys;\r\n    })\r\n        .catch(e => {\r\n        throw new Error(`couldn't generate key: ${e.message}`);\r\n    });\r\n}\r\n/**\r\n * Import a jwk from a JSON object\r\n * @param {object} json\r\n * @param {object=} options\r\n * @param {string} [options.alg=null] Defaults to alg in json\r\n * @param {boolean} [options.extractable=false]\r\n * @param {string[]} [options.usages=null] Defaults to key_ops in json\r\n */\r\nexport function importKey(json, { alg = null, extractable = true, usages = null } = {}) {\r\n    if (!json)\r\n        throw new Error('jwk must be an object');\r\n    alg = alg || json.alg;\r\n    if (!algos[alg])\r\n        throw new Error(`alg must be one of ${Object.keys(algos)}`);\r\n    let algo = Object.assign({}, algos[alg]);\r\n    if (json.kty === 'EC') {\r\n        algo.namedCurve = json.crv;\r\n        delete algo.hash;\r\n    }\r\n    // IE11 fix (should be added to webcrypto-shim)\r\n    // https://connect.microsoft.com/IE/feedback/details/2242108/webcryptoapi-importing-jwk-with-use-field-fails\r\n    if (typeof window !== 'undefined' && window.msCrypto) {\r\n        json = Object.assign({}, json);\r\n        delete json.use;\r\n    }\r\n    // The node polyfill doesn't work without key_ops, although key_ops is optional\r\n    // https://tools.ietf.org/html/rfc7517#section-4.3\r\n    if (!json.key_ops) {\r\n        json = Object.assign({}, json);\r\n        json.key_ops = json.d ? ['sign'] : ['verify'];\r\n    }\r\n    return crypto.subtle.importKey('jwk', // format\r\n    json, algo, extractable, usages || json.key_ops)\r\n        .catch(e => {\r\n        throw new Error(`couldn't import key: ${e.message}`);\r\n    });\r\n}\r\n/**\r\n * Export a jwk as a JSON object\r\n * @param key\r\n */\r\nexport function exportKey(key) {\r\n    return crypto.subtle.exportKey('jwk', key);\r\n}\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/johanobrink/src/egendata/jose/packages/jwk-lite/index.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Generate a jwk or key pair\r\n * @param {object} json\r\n * @param {string} alg\r\n * @param {object=} options\r\n */\r\nexport declare function generateKey(alg: any, { modulusLength, publicExponent, // 65537\r\nusages, extractable }?: {\r\n    modulusLength?: number;\r\n    publicExponent?: Uint8Array;\r\n    usages?: string[];\r\n    extractable?: boolean;\r\n}): any;\r\n/**\r\n * Import a jwk from a JSON object\r\n * @param {object} json\r\n * @param {object=} options\r\n * @param {string} [options.alg=null] Defaults to alg in json\r\n * @param {boolean} [options.extractable=false]\r\n * @param {string[]} [options.usages=null] Defaults to key_ops in json\r\n */\r\nexport declare function importKey(json: any, { alg, extractable, usages }?: {\r\n    alg?: any;\r\n    extractable?: boolean;\r\n    usages?: any;\r\n}): any;\r\n/**\r\n * Export a jwk as a JSON object\r\n * @param key\r\n */\r\nexport declare function exportKey(key: any): any;\r\n"}}
